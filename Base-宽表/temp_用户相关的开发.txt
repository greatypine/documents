1. 写一个用户与idcard的对应关系表 中间表
1）社员
2）线上员工
3）养老餐

2. 国安社区员工tag：
	线上员工 t_sync_record，

	select tc.id as customer_id
    from gemini.t_customer tc 
	left join 
	(
	    select distinct phone from daqweb.t_sync_record where phone is not null and phone != ''
	) t_sync on (tc.mobilephone = t_sync.phone)

	国安侠 t_human_resource

	select tc.id as customer_id
    from gemini.t_customer tc 
	left join 
	(
	    select distinct phone from daqweb.t_humanresources
	) th on (th.phone = tc.mobilephone)
	
	
	////////////////////////////////////////renmian
	## 国安社区员工tag：线上员工 t_sync_record，国安侠 t_human_resource
select * from (
select vc.id as customer_id, vc.mobilephone, 
sr.cardid as online, hs.cardnumber as offline, 
case when sr.cardid is not null then 'online'
     when hs.cardnumber is not null then 'offline'
     else 'no' end as is_guoan_employee  from v_full_customer vc left outer join daqweb.t_sync_record sr on vc.mobilephone=sr.phone and (sr.lefttime is null and sr.lefttime='')
left outer join daqweb.t_humanresources hs on vc.mobilephone=hs.phone and (hs.leavedate is null or hs.leavedate='')
where mobilephone is not null and mobilephone!=''
) t where is_guoan_employee!='no'

3. 近360天的消费次数tag (累计消费订单量/订单金额/订单频道/门店数/sku数量)
insert overwrite s_user_360ds_order_info
select
	tb.customer_id, -- 客户ID
	tb.cum_orders_360ds, -- 最近360天订单量
	360 / tb.cum_orders_360ds as avg_buy_interval_360ds, -- 最近360天平均订单间隔
	tb.cum_buy_360ds, -- 最近360天订单额
	tb.avg_buy_360ds, -- 最近360天均订单额
	tb.max_360ds, -- 最近360天最高单笔订单额
	tb.cum_channels_360ds, -- 最近360天下单频道数量
	e.cum_eshops_360ds, -- 最近360天下单E店数量
	s.cum_stores_360ds, -- 最近360天下单门店数量
	ep.cum_sku_360ds -- 最近360天下单sku数量
from (
	select
		tmp.customer_id,
		count(tmp.order_group_id) as cum_orders_360ds,
		sum(tmp.payable_price) as cum_buy_360ds,
		avg(tmp.payable_price) as avg_buy_360ds,
		max(tmp.payable_price) as max_360ds,
		count(distinct tmp.channel_id) as cum_channels_360ds
	from (
		select
			vo.order_group_id,
			vo.customer_id,
			vo.order_create_time,
			vo.payable_price,
			vo.channel_id
		from v_full_success_order as vo
		where datediff(now(), vo.order_create_time) <= 360
			group by vo.order_group_id, vo.customer_id, vo.order_create_time, vo.payable_price, vo.channel_id
	) as tmp
		group by tmp.customer_id
) as tb
left join (
	select
		vo.customer_id,
		count(distinct vo.eshop_id) as cum_eshops_360ds
	from v_full_success_order as vo
	where datediff(now(), vo.order_create_time) <= 360
		group by vo.customer_id
) as e on e.customer_id = tb.customer_id
left join (
	select
		vo.customer_id,
		count(distinct vo.store_id) as cum_stores_360ds
	from v_full_success_order as vo
	where datediff(now(), vo.order_create_time) <= 360
		group by vo.customer_id
) as s on s.customer_id = tb.customer_id
left join (
	select
		voi.customer_id,
		count(distinct voi.eshop_pro_id) as cum_sku_360ds
	from v_full_success_order_item as voi
	where datediff(now(), voi.order_create_time) <= 360
		group by voi.customer_id
) as ep on ep.customer_id = tb.customer_id


4. 差评tag （差评次数）   --- cum_bad_contents_tot

5. 400消费tag  （消费次数）
select customer_id from gemini.t_order where order_source = 'callcenter' group by customer_id

6. 无效用户tag（1,2）----单店单日注册次数（7位电话号码）

7. 过账支付
select customer_id from gemini.t_order_receipts where pay_platform = 'posting' group by customer_id;

8. 用户单日最大单数，
	select tor.customer_id,count(1) as count from gemini.t_order tor inner join gemini.t_eshop te on (tor.eshop_id = te.id) where sign_time is not null
	and to_date(tor.create_time) = from_unixtime(unix_timestamp(date_sub(now(), 1)),"yyyy-MM-dd")
    group by tor.customer_id having count(1) >10
   最大单日累计金额
   	select tor.customer_id,sum(tor.trading_price) from gemini.t_order tor inner join gemini.t_eshop te on (tor.eshop_id = te.id) where sign_time is not null
	and to_date(tor.create_time) = from_unixtime(unix_timestamp(date_sub(now(), 1)),"yyyy-MM-dd")
	group by tor.customer_id having sum(tor.trading_price) >10000

9.代客下单用户
select customer_id from gemini.t_order where order_source = 'store' group by customer_id;


10.
select
			t.customer_id,
			t.mac_address,
			row_number() over(partition by t.customer_id order by count(1) desc) as rank
		from gabdp_log.t_log as t
		where t.customer_id is not null and t.customer_id != '' and t.customer_id != 'null'
			and t.mac_address is not null and t.mac_address != '' and t.mac_address != 'null' and length(t.mac_address)=17
			group by t.customer_id, t.mac_address



11. select
			t.customer_id,
			max(t.request_date) as request_date
		from gabdp_log.t_log as t
		where t.customer_id is not null and t.customer_id != '' and t.customer_id != 'null'
			and t.request_date is not null and t.request_date != '' and t.request_date != 'null'
			group by t.customer_id
